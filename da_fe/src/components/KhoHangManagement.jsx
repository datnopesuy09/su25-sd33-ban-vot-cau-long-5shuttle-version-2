import React, { useState, useEffect } from 'react';
import axios from 'axios';
import swal from 'sweetalert';

const KhoHangManagement = ({ hoaDon, onRestoreComplete, currentOrderStatus }) => {
    const [isLoading, setIsLoading] = useState(false);
    const [forceRestoreReason, setForceRestoreReason] = useState('');
    const [showForceModal, setShowForceModal] = useState(false);
    const [orderStatus, setOrderStatus] = useState(currentOrderStatus || hoaDon.trangThai);
    const [lastUpdated, setLastUpdated] = useState(new Date().toLocaleString('vi-VN'));

    // State cho tracking ho√†n kho
    const [restoreInfo, setRestoreInfo] = useState({
        isRestored: false,
        forceRestoreCount: 0,
        canNormalRestore: false,
        canForceRestore: true,
        maxForceLimit: 1,
    });

    useEffect(() => {
        if (currentOrderStatus !== undefined) {
            setOrderStatus(currentOrderStatus);
            setLastUpdated(new Date().toLocaleString('vi-VN'));
        }
    }, [currentOrderStatus]);

    // Fetch th√¥ng tin ho√†n kho t·ª´ backend
    useEffect(() => {
        const fetchRestoreInfo = async () => {
            try {
                const response = await axios.get(`http://localhost:8080/api/kho-hang/lich-su/${hoaDon.id}`);
                if (response.data) {
                    setRestoreInfo({
                        isRestored: response.data.isRestored,
                        forceRestoreCount: response.data.forceRestoreCount,
                        canNormalRestore: orderStatus === 7 && !response.data.isRestored,
                        // V√¥ hi·ªáu h√≥a Force ho√†n kho n·∫øu ƒë∆°n h√†ng ƒë√£ h·ªßy (tr·∫°ng th√°i 7)
                        canForceRestore: orderStatus !== 7 && response.data.canForceRestore,
                        maxForceLimit: response.data.maxForceLimit,
                    });
                }
            } catch (error) {
                console.error('L·ªói khi l·∫•y th√¥ng tin ho√†n kho:', error);
            }
        };

        fetchRestoreInfo();
    }, [hoaDon.id, orderStatus]);

    // C·∫≠p nh·∫≠t tr·∫°ng th√°i real-time
    useEffect(() => {
        // Ch·ªâ polling n·∫øu kh√¥ng c√≥ currentOrderStatus t·ª´ props
        if (currentOrderStatus === undefined) {
            const fetchOrderStatus = async () => {
                try {
                    const response = await axios.get(`http://localhost:8080/api/kho-hang/trang-thai/${hoaDon.id}`);
                    if (response.data) {
                        setOrderStatus(response.data.trangThai);
                        setLastUpdated(new Date().toLocaleString('vi-VN'));
                    }
                } catch (error) {
                    console.error('L·ªói khi l·∫•y tr·∫°ng th√°i ƒë∆°n h√†ng:', error);
                }
            };

            fetchOrderStatus();
            const interval = setInterval(fetchOrderStatus, 30000);
            return () => clearInterval(interval);
        }
    }, [hoaDon.id, currentOrderStatus]);

    // Ho√†n kho th·ªß c√¥ng cho ƒë∆°n h√†ng ƒë√£ h·ªßy
    const handleRestoreStock = async () => {
        // if (orderStatus !== 7) {
        //     swal('C·∫£nh b√°o!', 'Ch·ªâ c√≥ th·ªÉ ho√†n kho cho ƒë∆°n h√†ng ƒë√£ h·ªßy', 'warning');
        //     return;
        // }

        if (restoreInfo.isRestored) {
            swal('C·∫£nh b√°o!', 'ƒê∆°n h√†ng n√†y ƒë√£ ƒë∆∞·ª£c ho√†n kho tr∆∞·ªõc ƒë√≥!', 'warning');
            return;
        }

        const isConfirmed = await swal({
            title: 'X√°c nh·∫≠n ho√†n kho',
            text: `B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën ho√†n kho cho ƒë∆°n h√†ng #${hoaDon.ma}?\n\n‚ö†Ô∏è Ch·ªâ c√≥ th·ªÉ ho√†n kho 1 l·∫ßn duy nh·∫•t!`,
            icon: 'warning',
            buttons: ['H·ªßy', 'X√°c nh·∫≠n'],
            dangerMode: true,
        });

        if (isConfirmed) {
            setIsLoading(true);
            try {
                const response = await axios.post(`http://localhost:8080/api/kho-hang/hoan-kho/${hoaDon.id}`);
                swal('Th√†nh c√¥ng!', response.data, 'success');
                setLastUpdated(new Date().toLocaleString('vi-VN'));

                // C·∫≠p nh·∫≠t tr·∫°ng th√°i local
                setRestoreInfo((prev) => ({
                    ...prev,
                    isRestored: true,
                    canNormalRestore: false,
                }));

                if (onRestoreComplete) {
                    onRestoreComplete();
                }
            } catch (error) {
                console.error('L·ªói khi ho√†n kho:', error);
                swal('L·ªói!', error.response?.data || 'Kh√¥ng th·ªÉ ho√†n kho', 'error');
            } finally {
                setIsLoading(false);
            }
        }
    };

    // Force ho√†n kho CH·ªà 1 L·∫¶N DUY NH·∫§T
    const handleForceRestore = async () => {
        if (!forceRestoreReason.trim()) {
            swal('C·∫£nh b√°o!', 'Vui l√≤ng nh·∫≠p l√Ω do force ho√†n kho', 'warning');
            return;
        }

        // Ki·ªÉm tra gi·ªõi h·∫°n force restore (ch·ªâ 1 l·∫ßn!)
        if (restoreInfo.forceRestoreCount >= 1) {
            swal('C·∫£nh b√°o!', 'ƒê√£ ƒë·∫°t gi·ªõi h·∫°n: CH·ªà ƒê∆Ø·ª¢C Force Ho√†n Kho 1 l·∫ßn duy nh·∫•t cho m·ªói ƒë∆°n h√†ng!', 'error');
            return;
        }

        const isConfirmed = await swal({
            title: 'üö® C·∫¢NH B√ÅO: Force Ho√†n Kho',
            text: `NGUY HI·ªÇM: Force ho√†n kho c√≥ th·ªÉ g√¢y sai l·ªách d·ªØ li·ªáu!\n\nB·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën FORCE ho√†n kho cho ƒë∆°n h√†ng #${hoaDon.ma}?\nL√Ω do: ${forceRestoreReason}\n\n‚ö†Ô∏è CH·ªà ƒê∆Ø·ª¢C S·ª¨ D·ª§NG 1 L·∫¶N DUY NH·∫§T!`,
            icon: 'warning',
            buttons: ['H·ªßy', 'FORCE RESTORE'],
            dangerMode: true,
        });

        if (isConfirmed) {
            setIsLoading(true);
            try {
                const response = await axios.post(`http://localhost:8080/api/kho-hang/force-hoan-kho/${hoaDon.id}`, {
                    reason: forceRestoreReason,
                });

                swal('Th√†nh c√¥ng!', `${response.data.message}\n\n‚ö†Ô∏è ƒê√£ s·ª≠ d·ª•ng Force Restore (1/1 l·∫ßn)`, 'success');
                setShowForceModal(false);
                setForceRestoreReason('');
                setLastUpdated(new Date().toLocaleString('vi-VN'));

                // C·∫≠p nh·∫≠t tr·∫°ng th√°i local
                setRestoreInfo((prev) => ({
                    ...prev,
                    forceRestoreCount: 1,
                    canForceRestore: false,
                }));

                if (onRestoreComplete) {
                    onRestoreComplete();
                }
            } catch (error) {
                console.error('L·ªói khi force ho√†n kho:', error);
                swal('L·ªói!', error.response?.data || 'Kh√¥ng th·ªÉ force ho√†n kho', 'error');
            } finally {
                setIsLoading(false);
            }
        }
    };

    const getStatusLabel = (status) => {
        const statusMap = {
            1: { label: 'Ch·ªù x√°c nh·∫≠n', color: 'bg-yellow-200 text-yellow-800' },
            2: { label: 'Ch·ªù giao h√†ng', color: 'bg-blue-200 text-blue-800' },
            3: { label: 'ƒêang v·∫≠n chuy·ªÉn', color: 'bg-purple-200 text-purple-800' },
            4: { label: 'ƒê√£ giao h√†ng', color: 'bg-green-200 text-green-800' },
            5: { label: 'ƒê√£ thanh to√°n', color: 'bg-indigo-200 text-indigo-800' },
            6: { label: 'Ho√†n th√†nh', color: 'bg-gray-200 text-gray-800' },
            7: { label: 'ƒê√£ h·ªßy', color: 'bg-red-200 text-red-800' },
            8: { label: 'Tr·∫£ h√†ng', color: 'bg-orange-200 text-orange-800' },
            // 9: { label: 'Ch·ªù nh·∫≠p h√†ng', color: 'bg-yellow-300 text-yellow-900' },
        };
        return statusMap[status] || { label: 'Kh√¥ng x√°c ƒë·ªãnh', color: 'bg-gray-200 text-gray-800' };
    };

    const statusInfo = getStatusLabel(orderStatus);

    return (
        <div className="bg-white rounded-lg shadow-md p-6 mb-6">
            <div className="flex justify-between items-start mb-4">
                <div>
                    <h3 className="text-lg font-semibold text-gray-800 mb-2">
                        Qu·∫£n l√Ω Kho H√†ng - ƒê∆°n h√†ng #{hoaDon.ma}
                    </h3>
                    <div className="flex items-center gap-2 mb-2">
                        <span className="text-sm text-gray-600">Tr·∫°ng th√°i:</span>
                        <span className={`px-2 py-1 rounded-full text-xs font-medium ${statusInfo.color}`}>
                            {statusInfo.label}
                        </span>
                    </div>
                    {restoreInfo.isRestored && (
                        <div className="text-sm text-green-600 font-medium">‚úÖ ƒê√£ ho√†n kho th√†nh c√¥ng</div>
                    )}
                    {restoreInfo.forceRestoreCount > 0 && (
                        <div className="text-sm text-orange-600 font-medium">
                            ‚ö†Ô∏è ƒê√£ Force Ho√†n Kho: {restoreInfo.forceRestoreCount}/{restoreInfo.maxForceLimit} l·∫ßn
                        </div>
                    )}
                </div>
                <div className="text-sm text-gray-500">
                    Ng√†y t·∫°o: {new Date(hoaDon.ngayTao).toLocaleDateString('vi-VN')}
                </div>
            </div>

            <div className="border-t pt-4">
                <h4 className="text-md font-medium text-gray-700 mb-3">Thao t√°c kho h√†ng</h4>

                <div className="flex flex-wrap gap-3">
                    {/* N√∫t ho√†n kho th√¥ng th∆∞·ªùng */}
                    {/* <button
                        onClick={handleRestoreStock}
                        // disabled={isLoading || !restoreInfo.canNormalRestore}
                        className={`px-4 py-2 rounded-md text-sm font-medium transition-colors ${
                            restoreInfo.canNormalRestore && !isLoading
                                ? 'bg-blue-600 text-white hover:bg-blue-700'
                                : 'bg-gray-300 text-gray-500 cursor-not-allowed'
                        }`}
                    >
                        {isLoading ? 'ƒêang x·ª≠ l√Ω...' : 'Ho√†n kho'}
                    </button> */}

                    {/* N√∫t force ho√†n kho (ch·ªâ admin) */}
                    <button
                        onClick={() => setShowForceModal(true)}
                        disabled={isLoading || !restoreInfo.canForceRestore}
                        className={`px-4 py-2 rounded-md text-sm font-medium transition-colors ${
                            !restoreInfo.canForceRestore
                                ? 'bg-gray-400 text-gray-200 cursor-not-allowed'
                                : 'bg-red-600 text-white hover:bg-red-700'
                        } disabled:opacity-50`}
                    >
                        {!restoreInfo.canForceRestore
                            ? orderStatus === 7
                                ? 'Kh√¥ng kh·∫£ d·ª•ng (ƒê√£ h·ªßy)'
                                : 'ƒê√£ h·∫øt l∆∞·ª£t Force'
                            : 'Force Ho√†n Kho (1 l·∫ßn)'}
                    </button>
                </div>

                {orderStatus !== 7 && !restoreInfo.isRestored && (
                    <p className="text-sm text-gray-500 mt-2">
                        * Ho√†n kho th√¥ng th∆∞·ªùng ch·ªâ kh·∫£ d·ª•ng cho ƒë∆°n h√†ng ƒë√£ h·ªßy
                    </p>
                )}

                {restoreInfo.isRestored && (
                    <p className="text-sm text-green-600 font-medium mt-2">
                        ‚úÖ ƒê∆°n h√†ng n√†y ƒë√£ ƒë∆∞·ª£c ho√†n kho th√†nh c√¥ng
                    </p>
                )}

                {!restoreInfo.canForceRestore && (
                    <p className="text-sm text-red-600 font-medium mt-2">
                        {orderStatus === 7
                            ? 'üö´ Force Ho√†n Kho kh√¥ng kh·∫£ d·ª•ng cho ƒë∆°n h√†ng ƒë√£ h·ªßy'
                            : '‚ö†Ô∏è ƒê√£ ƒë·∫°t gi·ªõi h·∫°n t·ªëi ƒëa Force Ho√†n Kho cho ƒë∆°n h√†ng n√†y'}
                    </p>
                )}

                {/* Th√¥ng b√°o ƒë·∫∑c bi·ªát cho ƒë∆°n h√†ng ƒë√£ h·ªßy */}
                {orderStatus === 7 && (
                    <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-3 mt-3">
                        <div className="flex items-start space-x-2">
                            <div className="w-4 h-4 text-yellow-600 mt-0.5">
                                <svg fill="currentColor" viewBox="0 0 20 20">
                                    <path
                                        fillRule="evenodd"
                                        d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z"
                                        clipRule="evenodd"
                                    />
                                </svg>
                            </div>
                            <div>
                                <h5 className="text-yellow-800 font-medium text-sm">ƒê∆°n h√†ng ƒë√£ h·ªßy</h5>
                                <p className="text-yellow-700 text-xs mt-1">
                                    S·ªë l∆∞·ª£ng s·∫£n ph·∫©m ƒë√£ ƒë∆∞·ª£c ho√†n l·∫°i t·ª± ƒë·ªông. Ch·ª©c nƒÉng Force ho√†n kho ƒë√£ b·ªã v√¥ hi·ªáu
                                    h√≥a ƒë·ªÉ tr√°nh duplicate restoration.
                                </p>
                            </div>
                        </div>
                    </div>
                )}
            </div>

            {/* Modal Force Restore */}
            {showForceModal && (
                <div className="fixed inset-0 flex items-center justify-center z-50 p-4">
                    <div
                        className="absolute inset-0 bg-black/50 backdrop-blur-sm"
                        onClick={() => setShowForceModal(false)}
                    />

                    <div className="relative bg-white rounded-lg shadow-xl max-w-md w-full">
                        <div className="bg-red-600 text-white p-4 rounded-t-lg">
                            <h3 className="text-lg font-bold">üö® FORCE HO√ÄN KHO DUY NH·∫§T</h3>
                            <p className="text-sm opacity-90">Ch·ª©c nƒÉng ƒë·∫∑c bi·ªát cho Admin - CH·ªà 1 L·∫¶N DUY NH·∫§T!</p>
                        </div>

                        <div className="p-6">
                            <div className="mb-4">
                                <label className="block text-sm font-medium text-gray-700 mb-2">
                                    L√Ω do force ho√†n kho: <span className="text-red-500">*</span>
                                </label>
                                <textarea
                                    value={forceRestoreReason}
                                    onChange={(e) => setForceRestoreReason(e.target.value)}
                                    className="w-full border border-gray-300 rounded-md p-3 text-sm focus:ring-red-500 focus:border-red-500"
                                    rows="3"
                                    placeholder="Nh·∫≠p l√Ω do t·∫°i sao c·∫ßn force ho√†n kho..."
                                />
                            </div>

                            <div className="bg-red-50 border-red-200 border rounded-md p-3 mb-4">
                                <p className="text-sm text-red-800">
                                    <strong>C·∫¢NH B√ÅO NGHI√äM TR·ªåNG:</strong> Force ho√†n kho s·∫Ω ho√†n l·∫°i s·ªë l∆∞·ª£ng b·∫•t k·ªÉ
                                    tr·∫°ng th√°i ƒë∆°n h√†ng. Ch·ªâ ƒë∆∞·ª£c s·ª≠ d·ª•ng 1 l·∫ßn duy nh·∫•t cho m·ªói ƒë∆°n h√†ng!
                                </p>
                                <p className="text-xs mt-1 text-red-600">
                                    S·ªë l·∫ßn ƒë√£ d√πng: {restoreInfo.forceRestoreCount}/{restoreInfo.maxForceLimit} | C√≤n
                                    l·∫°i: {restoreInfo.maxForceLimit - restoreInfo.forceRestoreCount} l·∫ßn
                                </p>
                            </div>
                        </div>

                        <div className="flex justify-end gap-3 p-6 bg-gray-50 rounded-b-lg">
                            <button
                                onClick={() => {
                                    setShowForceModal(false);
                                    setForceRestoreReason('');
                                }}
                                className="px-4 py-2 border border-gray-300 rounded-md text-gray-700 hover:bg-gray-50 transition-colors"
                            >
                                H·ªßy
                            </button>
                            <button
                                onClick={handleForceRestore}
                                disabled={!forceRestoreReason.trim() || isLoading}
                                className="px-4 py-2 bg-red-600 text-white rounded-md hover:bg-red-700 transition-colors disabled:opacity-50"
                            >
                                {isLoading ? 'ƒêang x·ª≠ l√Ω...' : 'FORCE RESTORE (1 L·∫¶N)'}
                            </button>
                        </div>
                    </div>
                </div>
            )}
        </div>
    );
};

export default KhoHangManagement;
