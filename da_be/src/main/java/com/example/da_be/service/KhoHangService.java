package com.example.da_be.service;

import com.example.da_be.entity.HoaDon;
import com.example.da_be.entity.HoaDonCT;
import com.example.da_be.entity.SanPhamCT;
import com.example.da_be.entity.SuCoVanChuyen;
import com.example.da_be.entity.ThongBao;
import com.example.da_be.repository.HoaDonCTRepository;
import com.example.da_be.repository.SanPhamCTRepository;
import com.example.da_be.repository.ThongBaoRepository;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;

@Service
public class KhoHangService {

    private static final Logger log = LoggerFactory.getLogger(KhoHangService.class);

    @Autowired
    private SanPhamCTRepository sanPhamCTRepository;

    @Autowired
    private HoaDonCTRepository hoaDonCTRepository;

    @Autowired
    private ThongBaoRepository thongBaoRepository;

    @Autowired
    private JdbcTemplate jdbcTemplate;

    /**
     * Ki·ªÉm tra xem ƒë∆°n h√†ng ƒë√£ ƒë∆∞·ª£c ho√†n kho ch∆∞a (b·∫•t k·ª≥ lo·∫°i n√†o)
     */
    public boolean isOrderAlreadyRestored(Integer hoaDonId) {
        try {
            String sql = "SELECT COUNT(*) FROM lich_su_hoan_kho WHERE hoa_don_id = ?";
            Integer count = jdbcTemplate.queryForObject(sql, Integer.class, hoaDonId);
            return count != null && count > 0;
        } catch (Exception e) {
            log.error("L·ªói khi ki·ªÉm tra l·ªãch s·ª≠ ho√†n kho: {}", e.getMessage());
            return false;
        }
    }

    /**
     * Ki·ªÉm tra s·ªë l·∫ßn force restore cho ƒë∆°n h√†ng
     */
    public int getForceRestoreCount(Integer hoaDonId) {
        try {
            String sql = "SELECT COUNT(*) FROM lich_su_hoan_kho WHERE hoa_don_id = ? AND loai_hoan_kho = 'FORCE'";
            Integer count = jdbcTemplate.queryForObject(sql, Integer.class, hoaDonId);
            return count != null ? count : 0;
        } catch (Exception e) {
            log.error("L·ªói khi ki·ªÉm tra s·ªë l·∫ßn force restore: {}", e.getMessage());
            return 0;
        }
    }

    /**
     * L∆∞u l·ªãch s·ª≠ ho√†n kho ƒë·ªÉ tracking
     */
    private void saveRestoreHistory(Integer hoaDonId, Integer sanPhamCTId, Integer soLuong, 
                                   String loaiHoanKho, String lyDo, String nguoiThucHien) {
        try {
            String sql = """
                INSERT INTO lich_su_hoan_kho (hoa_don_id, san_pham_ct_id, so_luong_hoan, 
                                            loai_hoan_kho, ly_do, nguoi_thuc_hien) 
                VALUES (?, ?, ?, ?, ?, ?)
                """;
            
            jdbcTemplate.update(sql, hoaDonId, sanPhamCTId, soLuong, loaiHoanKho, lyDo, nguoiThucHien);
            log.info("ƒê√£ l∆∞u l·ªãch s·ª≠ ho√†n kho: HoaDon={}, SanPhamCT={}, SoLuong={}, Loai={}", 
                    hoaDonId, sanPhamCTId, soLuong, loaiHoanKho);
            
        } catch (Exception e) {
            log.error("L·ªói khi l∆∞u l·ªãch s·ª≠ ho√†n kho: {}", e.getMessage());
            throw new RuntimeException("Kh√¥ng th·ªÉ l∆∞u l·ªãch s·ª≠ ho√†n kho: " + e.getMessage());
        }
    }

    /**
     * Ki·ªÉm tra t·ªìn kho c√≥ ƒë·ªß s·ªë l∆∞·ª£ng y√™u c·∫ßu kh√¥ng
     */
    public boolean checkStockAvailability(Integer sanPhamCTId, Integer soLuongYeuCau) {
        try {
            SanPhamCT sanPhamCT = sanPhamCTRepository.findById(sanPhamCTId).orElse(null);
            if (sanPhamCT == null) {
                return false;
            }
            return sanPhamCT.getSoLuong() >= soLuongYeuCau;
        } catch (Exception e) {
            log.error("L·ªói khi ki·ªÉm tra t·ªìn kho: {}", e.getMessage(), e);
            return false;
        }
    }

    /**
     * Ho√†n kho t·ª± ƒë·ªông khi ƒë∆°n h√†ng b·ªã h·ªßy (tr·∫°ng th√°i = 7)
     * CH·ªà TH·ª∞C HI·ªÜN 1 L·∫¶N DUY NH·∫§T ƒë·ªÉ tr√°nh duplicate restoration
     */
    @Transactional
    public void restoreStockOnCancelOrder(HoaDon hoaDon) {
        try {
            log.info("B·∫Øt ƒë·∫ßu ki·ªÉm tra ho√†n kho cho h√≥a ƒë∆°n: {}", hoaDon.getMa());

            // KI·ªÇM TRA QUAN TR·ªåNG: ƒê√£ ho√†n kho ch∆∞a?
            if (isOrderAlreadyRestored(hoaDon.getId())) {
                log.warn("‚ö†Ô∏è C·∫¢NH B√ÅO: ƒê∆°n h√†ng {} ƒë√£ ƒë∆∞·ª£c ho√†n kho tr∆∞·ªõc ƒë√≥. B·ªè qua ƒë·ªÉ tr√°nh duplicate!", hoaDon.getMa());
                throw new RuntimeException("ƒê∆°n h√†ng n√†y ƒë√£ ƒë∆∞·ª£c ho√†n kho tr∆∞·ªõc ƒë√≥!");
            }

            List<HoaDonCT> hoaDonCTList = hoaDonCTRepository.findByHoaDon(hoaDon);
            
            for (HoaDonCT hoaDonCT : hoaDonCTList) {
                SanPhamCT sanPhamCT = hoaDonCT.getSanPhamCT();
                
                // Ho√†n l·∫°i s·ªë l∆∞·ª£ng ƒë√£ tr·ª´
                int soLuongHoan = hoaDonCT.getSoLuong();
                int soLuongHienTai = sanPhamCT.getSoLuong();
                int soLuongMoi = soLuongHienTai + soLuongHoan;
                
                sanPhamCT.setSoLuong(soLuongMoi);
                sanPhamCTRepository.save(sanPhamCT);
                
                // L∆∞u l·ªãch s·ª≠ ho√†n kho AUTO
                saveRestoreHistory(hoaDon.getId(), sanPhamCT.getId(), soLuongHoan, "AUTO", 
                                 "T·ª± ƒë·ªông ho√†n kho khi h·ªßy ƒë∆°n h√†ng", "SYSTEM");
                
                log.info("‚úÖ Ho√†n kho AUTO: {} - S·ªë l∆∞·ª£ng t·ª´ {} th√†nh {}", 
                    sanPhamCT.getSanPham().getTen(), soLuongHienTai, soLuongMoi);
            }

            // T·∫°o th√¥ng b√°o cho kh√°ch h√†ng
            createCancelNotification(hoaDon);
            
            log.info("‚úÖ Ho√†n kho AUTO th√†nh c√¥ng cho h√≥a ƒë∆°n: {}", hoaDon.getMa());
            
        } catch (Exception e) {
            log.error("‚ùå L·ªói khi ho√†n kho cho h√≥a ƒë∆°n {}: {}", hoaDon.getMa(), e.getMessage(), e);
            throw new RuntimeException("L·ªói khi ho√†n kho: " + e.getMessage());
        }
    }

    /**
     * Ho√†n kho th·ªß c√¥ng cho admin (ch·ªâ √°p d·ª•ng cho ƒë∆°n h√†ng ƒë√£ h·ªßy)
     * CH·ªà TH·ª∞C HI·ªÜN N·∫æU CH∆ØA HO√ÄN KHO TR∆Ø·ªöC ƒê√ì
     */
    @Transactional
    public void manualRestoreStock(HoaDon hoaDon, String adminName) {
        try {
            log.info("B·∫Øt ƒë·∫ßu ho√†n kho th·ªß c√¥ng cho h√≥a ƒë∆°n: {} b·ªüi admin: {}", hoaDon.getMa(), adminName);

            // Ki·ªÉm tra tr·∫°ng th√°i ƒë∆°n h√†ng
            if (hoaDon.getTrangThai() != 7) {
                throw new RuntimeException("Ch·ªâ c√≥ th·ªÉ ho√†n kho th·ªß c√¥ng cho ƒë∆°n h√†ng ƒë√£ h·ªßy!");
            }

            // KI·ªÇM TRA QUAN TR·ªåNG: ƒê√£ ho√†n kho ch∆∞a?
            if (isOrderAlreadyRestored(hoaDon.getId())) {
                throw new RuntimeException("ƒê∆°n h√†ng n√†y ƒë√£ ƒë∆∞·ª£c ho√†n kho tr∆∞·ªõc ƒë√≥!");
            }

            List<HoaDonCT> hoaDonCTList = hoaDonCTRepository.findByHoaDon(hoaDon);
            
            for (HoaDonCT hoaDonCT : hoaDonCTList) {
                SanPhamCT sanPhamCT = hoaDonCT.getSanPhamCT();
                
                int soLuongHoan = hoaDonCT.getSoLuong();
                int soLuongHienTai = sanPhamCT.getSoLuong();
                int soLuongMoi = soLuongHienTai + soLuongHoan;
                
                sanPhamCT.setSoLuong(soLuongMoi);
                sanPhamCTRepository.save(sanPhamCT);
                
                // L∆∞u l·ªãch s·ª≠ ho√†n kho MANUAL
                saveRestoreHistory(hoaDon.getId(), sanPhamCT.getId(), soLuongHoan, "MANUAL", 
                                 "Ho√†n kho th·ªß c√¥ng b·ªüi admin", adminName);
                
                log.info("‚úÖ Ho√†n kho MANUAL: {} - S·ªë l∆∞·ª£ng t·ª´ {} th√†nh {}", 
                        sanPhamCT.getSanPham().getTen(), soLuongHienTai, soLuongMoi);
            }
            
            log.info("‚úÖ Ho√†n kho th·ªß c√¥ng th√†nh c√¥ng cho h√≥a ƒë∆°n: {}", hoaDon.getMa());
            
        } catch (Exception e) {
            log.error("‚ùå L·ªói khi ho√†n kho th·ªß c√¥ng: {}", e.getMessage(), e);
            throw new RuntimeException("Ho√†n kho th·ªß c√¥ng th·∫•t b·∫°i: " + e.getMessage());
        }
    }

    /**
     * Force ho√†n kho cho admin - CH·ªà 1 L·∫¶N DUY NH·∫§T
     * Ch·ªâ s·ª≠ d·ª•ng trong tr∆∞·ªùng h·ª£p ƒë·∫∑c bi·ªát v√† c√≥ l√Ω do r√µ r√†ng
     */
    @Transactional
    public void forceRestoreStock(HoaDon hoaDon, String reason, String adminName) {
        try {
            log.warn("üö® B·∫Øt ƒë·∫ßu FORCE RESTORE cho h√≥a ƒë∆°n: {} b·ªüi admin: {}", hoaDon.getMa(), adminName);

            // KI·ªÇM TRA NGHI√äM NG·∫∂T: S·ªë l·∫ßn force restore
            int forceCount = getForceRestoreCount(hoaDon.getId());
            if (forceCount >= 1) {
                throw new RuntimeException("üö´ ƒê√É ƒê·∫†T GI·ªöI H·∫†N: Ch·ªâ ƒë∆∞·ª£c Force Ho√†n Kho 1 l·∫ßn duy nh·∫•t cho m·ªói ƒë∆°n h√†ng!");
            }

            // Ki·ªÉm tra l√Ω do
            if (reason == null || reason.trim().isEmpty()) {
                throw new RuntimeException("L√Ω do force restore l√† b·∫Øt bu·ªôc!");
            }

            List<HoaDonCT> hoaDonCTList = hoaDonCTRepository.findByHoaDon(hoaDon);
            
            for (HoaDonCT hoaDonCT : hoaDonCTList) {
                SanPhamCT sanPhamCT = hoaDonCT.getSanPhamCT();
                
                int soLuongHoan = hoaDonCT.getSoLuong();
                int soLuongHienTai = sanPhamCT.getSoLuong();
                int soLuongMoi = soLuongHienTai + soLuongHoan;
                
                sanPhamCT.setSoLuong(soLuongMoi);
                sanPhamCTRepository.save(sanPhamCT);
                
                // L∆∞u l·ªãch s·ª≠ ho√†n kho FORCE v·ªõi l√Ω do
                saveRestoreHistory(hoaDon.getId(), sanPhamCT.getId(), soLuongHoan, "FORCE", 
                                 reason, adminName);
                
                log.warn("‚ö†Ô∏è FORCE RESTORE: {} - S·ªë l∆∞·ª£ng t·ª´ {} th√†nh {} - L√Ω do: {}", 
                        sanPhamCT.getSanPham().getTen(), soLuongHienTai, soLuongMoi, reason);
            }
            
            log.warn("‚ö†Ô∏è FORCE RESTORE HO√ÄN TH√ÄNH cho h√≥a ƒë∆°n: {} - L√Ω do: {}", hoaDon.getMa(), reason);
            
        } catch (Exception e) {
            log.error("‚ùå L·ªói khi force ho√†n kho: {}", e.getMessage(), e);
            throw new RuntimeException("Force ho√†n kho th·∫•t b·∫°i: " + e.getMessage());
        }
    }
    /**
     * T·∫°o th√¥ng b√°o khi h·ªßy ƒë∆°n h√†ng
     */
    private void createCancelNotification(HoaDon hoaDon) {
        try {
            if (hoaDon.getTaiKhoan() != null) {
                ThongBao thongBao = new ThongBao();
                thongBao.setKhachHang(hoaDon.getTaiKhoan());
                thongBao.setTieuDe("ƒê∆°n h√†ng ƒë√£ h·ªßy");
                thongBao.setNoiDung("ƒê∆°n h√†ng #" + hoaDon.getMa() + " ƒë√£ ƒë∆∞·ª£c h·ªßy v√† s·ªë l∆∞·ª£ng s·∫£n ph·∫©m ƒë√£ ƒë∆∞·ª£c ho√†n v·ªÅ kho.");
                thongBao.setTrangThai(1);
                thongBaoRepository.save(thongBao);
                
                log.info("ƒê√£ t·∫°o th√¥ng b√°o h·ªßy ƒë∆°n h√†ng cho kh√°ch h√†ng: {}", hoaDon.getTaiKhoan().getEmail());
            }
        } catch (Exception e) {
            log.error("L·ªói khi t·∫°o th√¥ng b√°o h·ªßy ƒë∆°n h√†ng: {}", e.getMessage(), e);
        }
    }

    /**
     * Ho√†n kho khi tr·∫£ h√†ng
     */
    @Transactional
    public void restoreStockOnReturn(HoaDonCT hoaDonCT, Integer soLuongTra) {
        try {
            log.info("B·∫Øt ƒë·∫ßu ho√†n kho do tr·∫£ h√†ng - HoaDonCT ID: {}, S·ªë l∆∞·ª£ng tr·∫£: {}", 
                    hoaDonCT.getId(), soLuongTra);

            SanPhamCT sanPhamCT = hoaDonCT.getSanPhamCT();
            int soLuongHienTai = sanPhamCT.getSoLuong();
            int soLuongMoi = soLuongHienTai + soLuongTra;
            
            sanPhamCT.setSoLuong(soLuongMoi);
            sanPhamCTRepository.save(sanPhamCT);
            
            log.info("Ho√†n kho do tr·∫£ h√†ng: {} - S·ªë l∆∞·ª£ng t·ª´ {} th√†nh {}", 
                    sanPhamCT.getSanPham().getTen(), soLuongHienTai, soLuongMoi);
            
        } catch (Exception e) {
            log.error("L·ªói khi ho√†n kho do tr·∫£ h√†ng: {}", e.getMessage(), e);
            throw new RuntimeException("L·ªói khi ho√†n kho do tr·∫£ h√†ng: " + e.getMessage());
        }
    }

    /**
     * Ho√†n kho cho m·ªôt s·∫£n ph·∫©m c·ª• th·ªÉ (d√πng cho s·ª± c·ªë v·∫≠n chuy·ªÉn)
     */
    @Transactional
    public void restoreStock(Integer sanPhamCTId, Integer soLuongHoan) {
        try {
            log.info("B·∫Øt ƒë·∫ßu ho√†n kho cho s·∫£n ph·∫©m ID: {}, S·ªë l∆∞·ª£ng: {}", sanPhamCTId, soLuongHoan);

            SanPhamCT sanPhamCT = sanPhamCTRepository.findById(sanPhamCTId)
                    .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m v·ªõi ID: " + sanPhamCTId));

            int soLuongHienTai = sanPhamCT.getSoLuong();
            int soLuongMoi = soLuongHienTai + soLuongHoan;

            sanPhamCT.setSoLuong(soLuongMoi);
            sanPhamCTRepository.save(sanPhamCT);

            log.info("Ho√†n kho th√†nh c√¥ng cho s·∫£n ph·∫©m: {} - S·ªë l∆∞·ª£ng t·ª´ {} th√†nh {}", 
                    sanPhamCT.getSanPham().getTen(), soLuongHienTai, soLuongMoi);

        } catch (Exception e) {
            log.error("L·ªói khi ho√†n kho cho s·∫£n ph·∫©m ID {}: {}", sanPhamCTId, e.getMessage(), e);
            throw new RuntimeException("L·ªói khi ho√†n kho: " + e.getMessage());
        }
    }

    /**
     * Ghi nh·∫≠n h√†ng kh√¥ng th·ªÉ ho√†n kho (h·ªèng/m·∫•t/s·ª± c·ªë) thay v√¨ ho√†n kho b√¨nh th∆∞·ªùng
     * ƒê·ªÉ tracking cho m·ª•c ƒë√≠ch ki·ªÉm to√°n v√† b·∫£o hi·ªÉm
     */
    @Transactional
    public void recordDamagedOrLostStock(HoaDon hoaDon, SuCoVanChuyen.LoaiSuCo loaiSuCo, String reason) {
        try {
            log.info("Ghi nh·∫≠n h√†ng h·ªèng/m·∫•t cho ƒë∆°n h√†ng: {} - Lo·∫°i: {} - L√Ω do: {}", 
                    hoaDon.getMa(), loaiSuCo, reason);

            List<HoaDonCT> hoaDonCTList = hoaDonCTRepository.findByHoaDon(hoaDon);
            
            for (HoaDonCT hoaDonCT : hoaDonCTList) {
                SanPhamCT sanPhamCT = hoaDonCT.getSanPhamCT();
                Integer soLuongMat = hoaDonCT.getSoLuong();
                
                // Ghi log kho h√†ng h·ªèng/m·∫•t cho tracking
                String logSql = "INSERT INTO lich_su_hoan_kho (hoa_don_id, san_pham_ct_id, so_luong_hoan, " +
                               "loai_hoan_kho, ly_do, ngay_tao, trang_thai) VALUES (?, ?, ?, ?, ?, NOW(), ?)";
                
                // X√°c ƒë·ªãnh lo·∫°i ghi nh·∫≠n d·ª±a tr√™n s·ª± c·ªë
                String loaiHoanKho;
                switch (loaiSuCo) {
                    case HANG_BI_HONG:
                        loaiHoanKho = "HANG_BI_HONG";
                        break;
                    case HANG_BI_MAT:
                        loaiHoanKho = "HANG_BI_MAT";
                        break;
                    case SU_CO_VAN_CHUYEN:
                        loaiHoanKho = "SU_CO_VAN_CHUYEN";
                        break;
                    case KHAC:
                        loaiHoanKho = "SU_CO_KHAC";
                        break;
                    default:
                        loaiHoanKho = "KHONG_HOAN_KHO";
                        break;
                }
                
                String lyDo = String.format("S·ª± c·ªë: %s - %s - S·ªë l∆∞·ª£ng: %d - KH√îNG HO√ÄN KHO", loaiSuCo, reason, soLuongMat);
                
                jdbcTemplate.update(logSql, 
                    hoaDon.getId(), 
                    sanPhamCT.getId(), 
                    soLuongMat,
                    loaiHoanKho, 
                    lyDo, 
                    "RECORDED" // Ch·ªâ ghi nh·∫≠n, kh√¥ng ho√†n kho
                );
                
                log.info("ƒê√£ ghi nh·∫≠n {} {} s·∫£n ph·∫©m '{}' (ID: {}) - KH√îNG HO√ÄN KHO do: {}", 
                        soLuongMat, loaiHoanKho, sanPhamCT.getSanPham().getTen(), sanPhamCT.getId(), loaiSuCo);
            }

            // T·∫°o th√¥ng b√°o n·ªôi b·ªô v·ªÅ h√†ng h·ªèng/m·∫•t ƒë·ªÉ x·ª≠ l√Ω b·∫£o hi·ªÉm
            try {
                ThongBao internalNotice = new ThongBao();
                internalNotice.setTieuDe("B√°o c√°o s·ª± c·ªë kh√¥ng ho√†n kho - C·∫ßn x·ª≠ l√Ω b·ªìi th∆∞·ªùng");
                internalNotice.setNoiDung(String.format(
                    "ƒê∆°n h√†ng #%s: %s - %s. H√†ng h√≥a KH√îNG ƒë∆∞·ª£c ho√†n kho do s·ª± c·ªë. C·∫ßn li√™n h·ªá ƒë∆°n v·ªã v·∫≠n chuy·ªÉn ƒë·ªÉ b·ªìi th∆∞·ªùng.",
                    hoaDon.getMa(), loaiSuCo, reason
                ));
                internalNotice.setTrangThai(0); // Ch∆∞a ƒë·ªçc
                thongBaoRepository.save(internalNotice);
                
                log.info("ƒê√£ t·∫°o th√¥ng b√°o n·ªôi b·ªô v·ªÅ h√†ng h·ªèng/m·∫•t cho ƒë∆°n h√†ng {}", hoaDon.getMa());
            } catch (Exception e) {
                log.warn("Kh√¥ng th·ªÉ t·∫°o th√¥ng b√°o n·ªôi b·ªô: {}", e.getMessage());
            }

        } catch (Exception e) {
            log.error("L·ªói khi ghi nh·∫≠n h√†ng h·ªèng/m·∫•t cho ƒë∆°n h√†ng {}: {}", hoaDon.getMa(), e.getMessage(), e);
            throw new RuntimeException("L·ªói khi ghi nh·∫≠n h√†ng h·ªèng/m·∫•t: " + e.getMessage());
        }
    }

    /**
     * ƒê·∫∑t tr∆∞·ªõc kho (reserve stock) khi ƒë·∫∑t h√†ng
     */
    @Transactional
    public void reserveStock(HoaDon hoaDon, List<HoaDonCT> hoaDonCTList) {
        try {
            log.info("B·∫Øt ƒë·∫ßu ƒë·∫∑t tr∆∞·ªõc kho cho h√≥a ƒë∆°n: {}", hoaDon.getMa());

            for (HoaDonCT hoaDonCT : hoaDonCTList) {
                SanPhamCT sanPhamCT = hoaDonCT.getSanPhamCT();
                int soLuongDat = hoaDonCT.getSoLuong();
                int soLuongHienTai = sanPhamCT.getSoLuong();
                
                if (soLuongHienTai < soLuongDat) {
                    throw new RuntimeException("Kh√¥ng ƒë·ªß h√†ng trong kho cho s·∫£n ph·∫©m: " + 
                                             sanPhamCT.getSanPham().getTen());
                }
                
                int soLuongMoi = soLuongHienTai - soLuongDat;
                sanPhamCT.setSoLuong(soLuongMoi);
                sanPhamCTRepository.save(sanPhamCT);
                
                log.info("ƒê·∫∑t tr∆∞·ªõc kho: {} - S·ªë l∆∞·ª£ng t·ª´ {} th√†nh {}", 
                        sanPhamCT.getSanPham().getTen(), soLuongHienTai, soLuongMoi);
            }
            
            log.info("ƒê·∫∑t tr∆∞·ªõc kho th√†nh c√¥ng cho h√≥a ƒë∆°n: {}", hoaDon.getMa());
            
        } catch (Exception e) {
            log.error("L·ªói khi ƒë·∫∑t tr∆∞·ªõc kho cho h√≥a ƒë∆°n {}: {}", hoaDon.getMa(), e.getMessage(), e);
            throw new RuntimeException("L·ªói khi ƒë·∫∑t tr∆∞·ªõc kho: " + e.getMessage());
        }
    }
}
